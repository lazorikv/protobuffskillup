# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import books_pb2 as books__pb2


class BookServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_book = channel.unary_unary(
                '/books.BookService/get_book',
                request_serializer=books__pb2.BookRequest.SerializeToString,
                response_deserializer=books__pb2.BookResponse.FromString,
                )
        self.list_books = channel.unary_unary(
                '/books.BookService/list_books',
                request_serializer=books__pb2.ListBooksRequest.SerializeToString,
                response_deserializer=books__pb2.ListBooksResponse.FromString,
                )
        self.add_book = channel.unary_unary(
                '/books.BookService/add_book',
                request_serializer=books__pb2.AddBookRequest.SerializeToString,
                response_deserializer=books__pb2.BookResponse.FromString,
                )
        self.delete_book = channel.unary_unary(
                '/books.BookService/delete_book',
                request_serializer=books__pb2.BookRequest.SerializeToString,
                response_deserializer=books__pb2.DeleteBookResponse.FromString,
                )


class BookServiceServicer(object):
    """Service definition
    """

    def get_book(self, request, context):
        """Get book by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_books(self, request, context):
        """List all books
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_book(self, request, context):
        """Add a new book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_book(self, request, context):
        """Delete a book
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BookServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_book': grpc.unary_unary_rpc_method_handler(
                    servicer.get_book,
                    request_deserializer=books__pb2.BookRequest.FromString,
                    response_serializer=books__pb2.BookResponse.SerializeToString,
            ),
            'list_books': grpc.unary_unary_rpc_method_handler(
                    servicer.list_books,
                    request_deserializer=books__pb2.ListBooksRequest.FromString,
                    response_serializer=books__pb2.ListBooksResponse.SerializeToString,
            ),
            'add_book': grpc.unary_unary_rpc_method_handler(
                    servicer.add_book,
                    request_deserializer=books__pb2.AddBookRequest.FromString,
                    response_serializer=books__pb2.BookResponse.SerializeToString,
            ),
            'delete_book': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_book,
                    request_deserializer=books__pb2.BookRequest.FromString,
                    response_serializer=books__pb2.DeleteBookResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'books.BookService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BookService(object):
    """Service definition
    """

    @staticmethod
    def get_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books.BookService/get_book',
            books__pb2.BookRequest.SerializeToString,
            books__pb2.BookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_books(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books.BookService/list_books',
            books__pb2.ListBooksRequest.SerializeToString,
            books__pb2.ListBooksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books.BookService/add_book',
            books__pb2.AddBookRequest.SerializeToString,
            books__pb2.BookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_book(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/books.BookService/delete_book',
            books__pb2.BookRequest.SerializeToString,
            books__pb2.DeleteBookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
